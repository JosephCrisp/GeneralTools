subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
gapOpeningPenalty=0
gapExtensionPenalty=1
feature <- commonFeatures[i]
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
alignment
score(alignment)
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty=0, gapExtensionPenalty=1){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Features=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
alignmentScores <- calculateAlignmentScores(commonFeatures, featureSequences)
head(alignmentScores)
hist(alignmentScores$Score)
hist(alignmentScores$Score, breaks=1000)
hist(alignmentScores$Score < 5000, breaks=1000)
hist(alignmentScores[alignmentScores$Score < 5000, "Score"], breaks=1000)
hist(alignmentScores[alignmentScores$Score < 1000, "Score"], breaks=1000)
nchar(alignment)
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty=0, gapExtensionPenalty=1){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Features=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
alignmentScores <- calculateAlignmentScores(commonFeatures, featureSequences)
substitutionMatrix <- nucleotideSubstitutionMatrix(match=1, mismatch=-1,
baseOnly=TRUE)
substitutionMatrix
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty=0, gapExtensionPenalty=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE)){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Features=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
hist(alignmentScores$Score)
hist(alignmentScores$Score, breaks=1000)
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty=0, gapExtensionPenalty=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE)){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Features=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
alignment <- NULL
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
substitutionMatrix <- nucleotideSubstitutionMatrix(match=1, mismatch=-1,
baseOnly=TRUE)
alignmentScores <- calculateAlignmentScores(commonFeatures, featureSequences,
gapOpeningPenalty=0,
gapExtensionPenalty=1,
substitutionMatrix=substitutionMatrix)
hist(alignmentScores$Score)
a <- "ACTCGCTCTC"
b <- "ACTGCTCGAC"
alignment <- pairwiseAlignment(pattern=a, subject=b,
gapOpening=0, gapExtension=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE))
ailgnment
alignment
a <- "ACTCGCTCTC"
b <- "ACTCGCTCTC"
alignment <- pairwiseAlignment(pattern=a, subject=b,
gapOpening=0, gapExtension=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE))
alignment
a <- "ACTCGCTCTC"
b <- "ACTCGCTCTC"
alignment <- pairwiseAlignment(pattern=a, subject=b,
gapOpening=0, gapExtension=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE))
score(alignment) / nchar(alignment)
a <- "ACTCGCACTC"
b <- "ACTCGCTCTC"
alignment <- pairwiseAlignment(pattern=a, subject=b,
gapOpening=0, gapExtension=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE))
score(alignment) / nchar(alignment)
feature
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
a <- "ACTCGCACTC"
b <- "ACTCGCTCTC"
alignment <- pairwiseAlignment(pattern=a, subject=b,
gapOpening=0, gapExtension=1,
substitutionMatrix=
nucleotideSubstitutionMatrix(match=1,
mismatch=-1,
baseOnly=TRUE))
score(alignment) / nchar(alignment)
alignment <- NULL
score(alignment) / nchar(alignment)
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global", substitutionMatrix=NULL,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
alignment
score(alignment)
score(alignment) / nchar(alignment)
unique(alignmentScores$Score)
length(which(alignmentScores$Score < 1))
length(which(alignmentScores$Score < 1.5))
length(which(alignmentScores$Score >1.5))
nrow(alignmentScores)
alignment
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty, gapExtensionPenalty,
substitutionMatrix){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Features=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
alignment <- NULL
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
substitutionMatrix <- nucleotideSubstitutionMatrix(match=1, mismatch=-1,
baseOnly=TRUE)
alignmentScores <- calculateAlignmentScores(commonFeatures, featureSequences,
gapOpeningPenalty=0,
gapExtensionPenalty=1,
substitutionMatrix=substitutionMatrix)
hist(alignmentScores)
hist(alignmentScores$Score)
hist(alignmentScores$Score, las=1)
length(which(alignmentScores$Score < 1))
length(which(alignmentScores$Score ==1))
hist(alignmentScores[alignmentScores$Score < 1, "Score"])
hist(alignmentScores[alignmentScores$Score < 1, "Score"], las=1)
alignmentScores[alignmentScores$Score < 1, "Feature"]
alignmentScores[alignmentScores$Score < 1, "Features"]
colnames(alignmentScores) <- c("Feature", "Score")
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty, gapExtensionPenalty,
substitutionMatrix){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Feature=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
alignment <- NULL
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
return(alignmentScores)
}
alignmentScores$Feature
alignmentScores[alignmentScores$Score < 1, "Feature"]
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty, gapExtensionPenalty,
substitutionMatrix){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Feature=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
alignments <- list()
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
alignment <- NULL
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the alignment
alignments[[feature]] <- alignment
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
output <- list(
"Scores"=alignmentScores,
"Alignments"=alignments
)
return(alignmentScores)
}
substitutionMatrix <- nucleotideSubstitutionMatrix(match=1, mismatch=-1,
baseOnly=TRUE)
alignmentInfo <- calculateAlignmentScores(commonFeatures, featureSequences,
gapOpeningPenalty=0,
gapExtensionPenalty=1,
substitutionMatrix=substitutionMatrix)
calculateAlignmentScores <- function(commonFeatures, featureSequences,
gapOpeningPenalty, gapExtensionPenalty,
substitutionMatrix){
# Initialise an output table to store the alignment scores
alignmentScores <- data.frame(Feature=commonFeatures, stringsAsFactors=FALSE,
Score=rep(NA, length(commonFeatures)))
alignments <- list()
# Compare the sequences avalable for each feature
for(i in 1:length(commonFeatures)){
feature <- commonFeatures[i]
alignment <- NULL
# Compare the sequences for the current feature for the original and transferred
if(nchar(featureSequences[[feature]]$Original) >=
nchar(featureSequences[[feature]]$Transferred)){
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Original,
subject=featureSequences[[feature]]$Transferred,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}else{
alignment <- pairwiseAlignment(
pattern=featureSequences[[feature]]$Transferred,
subject=featureSequences[[feature]]$Original,
scoreOnly=FALSE, type="global",
substitutionMatrix=substitutionMatrix,
gapOpening=gapOpeningPenalty, gapExtension=gapExtensionPenalty)
}
# Store the alignment
alignments[[feature]] <- alignment
# Store the scores
alignmentScores[i, "Score"] <- score(alignment) / nchar(alignment)
# Progress
if(i %% 1000 == 0){
cat(paste("Finished alignment for", i, "of", length(commonFeatures),
"features.\n"))
}
}
output <- list(
"Scores"=alignmentScores,
"Alignments"=alignments
)
return(output)
}
alignmentInfo <- calculateAlignmentScores(commonFeatures, featureSequences,
gapOpeningPenalty=0,
gapExtensionPenalty=1,
substitutionMatrix=substitutionMatrix)
alignmentScores <- alignmentInfo[["Scores"]]
poorlyAlignmentFeatures <- alignmentScores[alignmentScores$Score < 1, "Feature"]
poorlyAlignmentFeatures
feature <- "Mb1668"
alignmentInfo[["Alignments"]][[feature]]
for(feature in poorlyAlignmentFeatures){
alignmentInfo[["Alignments"]][[feature]]
}
for(feature in poorlyAlignmentFeatures){
print(alignmentInfo[["Alignments"]][[feature]])
}
for(feature in poorlyAlignmentFeatures){
print("---------------------------------------------")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
print(score(alignment) / nchar(alignment))
}
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n"))
}
poorlyAlignmentFeatures <- alignmentScores[alignmentScores$Score < 0.95, "Feature"]
# Examine each of the poorly aligned features
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n"))
}
length(poorlyAlignmentFeatures)
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n"))
}
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n\n\n\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n"))
}
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n\n\n\n"))
}
for(feature in poorlyAlignmentFeatures){
cat("################################################################################################################\n")
cat("################################################################################################################\n\n")
alignment <- alignmentInfo[["Alignments"]][[feature]]
print(alignment)
cat(paste(score(alignment) / nchar(alignment), "\n\n\n\n"))
}
