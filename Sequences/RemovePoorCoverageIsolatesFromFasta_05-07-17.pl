#!/usr/bin/perl
# Searching files in a directory
use warnings;
use strict;
use Term::ANSIColor; # For Coloured Print Statements

# Author: Joseph Crisp
# Remove isolates from the FASTA that have poor coverage at the Variant Positions

# Command Line Structure
# perl RemovePoorCoverageIsolatesFromFasta_06-09-16.pl threshold sequences.fasta

# FASTA File Format:
# 218 969
# >WB8_S22_171.vcf
# GGGGGCGGCCGCCACTGCCGACCCCCAACGCCGCCCTAAGTGGCCTTCATCTGCTGTGTCCGTCTACTCCTCCCACCTGCTCCCACAGCCCAGACCCCTCCTCATCCGGGCGTTTTCGTGTGTTAGCATCTAGGGGCCCTATGGTCGCCGCGCTCCGCTAGGGGCCTGCAATCGCGCACCTCAAGAAAAGAAAAAGATCCCCGCCAACCCTATCCCTCCACAACCCGACGAAATGCCTGATGGTTGGTGCGCGCGCGGCTTTCCGCTTCCTCCTACGCGCCTTCGGAGGCGGCAGCTCCCATTGTTACGTCTACGCCCGTGGGCCGTCCCACCAACGTTCGTAAGGCCCGAGTTTGCGGATTGACCATCAGCCGCGGTGTCCCGGTCGGCGTTCGCCCCACTTGTGAGCGTGTTGCAGCTGCTGGCTCCCCGTTACAAGCGGGCCTGGCGCGCCCGGAGGCTAGTTCGGGGAGCCTTTACAACTTGGTGACTCCGCCGGCCCTAGCGTTAGCCCCTATCGTCGACGAGCAGCGGGGCGGCTTGGCCTCGTCGGGCGAGTGGCCGGCGCTAGTAAGGCGGCCGAACTCGTTGCTCACAAGGGGCGGAAACACGGCCCCCGCTAGCCGGAGGTTCCATGAGGGGCGTCCTGGGGGCCACCGACAGAGGCGGGTGAAGTTAAGGCCGGTTCGCGGGTCCGTCTTCGGAGGGCCGCGAGCGACGCNACGCGGTGTGACGGGCCGTCCGCAGTGCAGAGCGGGCTTGCTTGTAAAGGTAGGAGCAAGGCTGTCTTGGATGGAGCGCGCACGGCAGGCCGTCTGCGAAGCCACGTATACTCTGGGCCGCCCTCGGAGAAGTTCGGGGGCGTCAGGAGGTCCGAGGGGTCCGAACNGAGGTGTGCGGGCCGGGGATTCGGGTTGGGGCCTGCGGTTCCACTGCAGTCGTCCGCCCCCGATGTTGTGCGAAGGGCCC
# >WB90_S54_172.vcf
# GGGGGCGGCNGCCANTGCCGACNCCNAACGCCACCCTANGTGGCCNNCATCTNCCGTGTCCGTCTACTCCTCCCACCTGCTCACACAGCCCAGACCCCTCCTCATCCGGGCGNTTTCGTGTGTCAGCATCTAGGGGCCCTATGGTCGCCGCGCTCCGTTAGGGGCCTGCAATCGCGCACCTCAATAAAAGAAAAAGATCCCCGCCAACCCTATCCCTCCACAACCCGACGAAATGCCTGATGGTTNGTGCGCGTGCCGCTTTCCGCTTCCTCCTACGCGCCCTCNGANGCGGCAGCTCCCATTGGTACGTCTACGCCCATGGGCCNTCCCACCGACGTTCGTAAGGCCCGAGTTTGCGGATTGACCATCAGCCGCGGTGTCCCGGTCGGCNTTCGCCCCATTTGTAAGCGTGTTGCAGCTGCTAGCTCCNCTTTATAAGCGGNCNTGACGCGCCCGGAGGCTAGTTCGGGGAGCCTTTACAACTTGGTGACTCCGCCGGCCCTAGCGTTCGCCNCTATCGTCGACGAGCNGCGGGGTGGCTTGGCCTCGTCGGGCGAGTGGCCNGCGCCNGTAAGGCGGCCGAACTCGTTGCTCACAAGGGGCGGAAACACGGCCCCCGNTAGCCGGAGGTTCCATGAGGGGCGTCCTGGGGGCCACCGACAGAGGCGGGTGAAGTTAAGGCCGGTTCGCGGGTCCGTCTCCGGAGGGCCGCGAGCGACGCTACGCGGTGTGACGGGCCGTCCGCAGTGCAGANCGGGCTTGCTTGTAAAGGTAGGAGCAAGGCTGTCTTGGATGGAGCGCGCACGGCAGGCCGTCTGCGAAGCCACGNGTACTCTGGGCCGCNCTCGGAGAAGTTCGGGGNCGTCAGGAGGTCCGAGGGGTCCGAACTNAGNNGTGCGGGCCGGGGATTCGGGTNGGGGCCTGCGGTTCCACTGCAGTCATCCGCCCCCGATGTTGTGCGAAGGGCCC
# >WB92_S71_174.vcf
# GGGGGCGNCNGCCACTGCCGACCCCCAACGCCGCCCTAAGTGNCCTTCATCTNCNGTGTCCGTCTACTCCTCCCACCTGCTCCNACAGCCCAGACCCCTCCTCATCCGGGCGTTTTCGTGTGTTAGCATCTAGGGGCCCTATGGTCGCCGCGCTCCGCTAGGGGCCTGCAATCGCGCACCTCAAGAAAAGAAAAAGATCCCTGCCAACCCTATCCCTCCACAACCCGACGAANTGCCTGATGGTTGGTGCGCGCGCGGCTTTCCGCTNCCTCCTACGCGCCTTCGGAGGCGGCAGCTCCCNTNGTTACGTCTACGCCNATGGGCCGTCTCACCANNGTTCGTANGGCCCGAGTTTGCAGATTGNCCATCAGCCGCGGTGTCCCGGTCGGCGTTCGCCCCACTTGTAAGCGTGTTGCAGCTGNTGGCTCCCCTTTACNAGCGGGCNTGGCGCGCCCGGAGGCNAGTTCGGGGAGCCTTTACAACTTGGTGACTCCGCCGGCCCTAGNGTTAGCCCCTATCGNCGACGAGCAGCGGGGCGGCTTGGCCTCGTCGGGCGAGTGGCCGGCGCTAGTAAGGCGGCCGAACTCGTTGCNCCCAAGGGGCGGAAACACGGCCCCCGNTAGCCGGAGGTTCCANGAGGGGCGTCCTGGGGGCCACCGACAGAGGCGGGTGAAGTTAAGGCCGGTTCGCGGGTCCGTCTTCGGAGGGCCGCNAGCGACGCTACNCGGTGTGACGGGCCGTNCGCAGTGCAGAGCGGGCTTGCTTGTAAAGGTANGANCAAGGCTGTNTTGGATGGAGCGCGCACGGCAGGCCGTCTGCGAAGCCACGTATACTCTGGGCCGCCCTCGGAGAAGTTCGGGGGCGTCAGGAGGTCCGAGGGGTCCGAACTGAGGTGTGCGGGNCGGGGATTCGGGTTGGGGCCTGCGGTTCCACTGCAGTCGNCCGCCCCCGATGTTGTGCGAAGGGCCC
# >WB93_S8_175.vcf
# GGGGGCGGCCGCCACTGCCGACCCCCAACGCCGCCCTAAGTGGCCTTCATCTGCTGTGTCCGTCTACTCCTCCCACCTGCTCCCACAGCCCAGACCCCTCCTCATCCGGNCGTTTTCGTGTGTTAGCATCTAGGNGCCCTATGGTCGCCGCGCTCCGCTAGGGGCCTGCAATCGCGCACCTNAAGAAAAGAAAAAGATCCCTGCCAACCCTATCCCTCCACAACCCGACGAAATGCCTGATGGTTGGTGCGCGCGCGGCTTTCCGCTTCCTNCTACGCGCCTTCGGAGGCGGCAGCTCCCATTGTTACGTCNACGCCCATGGGCCGTCTCACCANCGTTCGTAAGGCCCGAGTTTGCAGATTGACCATCAGCCGCGGTGTCCCGGTCGGCGTTCGCCCCNCTTGTAAGCGTGTTGCAGCTGCTGGCTCCCCTTTACAAGCGGNCCTGGCGCGCCCGGAGGCTAGTTCGGGGAGCCTTTACAACTTGGTGACTCCGCCGGCCCTAGCGTTAGCCCCTATCGTCGACGAGCAGCGGGGCGGCTTGGCCTCGTCGGGCGAGTGGCCGGCGCTANTAAGGCGGCCGAACTCGTTGCTCCCAAGGGGCGGAAACACGGCCCCCGCTAGCCGGAGGTTCCATGAGGGGCGTCCTGGGGGCCACCGACAGAGGCGGGTGAAGTTAAGGCCGGTTCGCGGGTCCGTCTNCGGAGGGCCGCGAGCGACGCTACGCGGTGTGACGGGCCGTCCGCAGTGCAGAGCGGGCTTGCTTGTAAAGGTAGGAGCAAGGCTGTCTTGGATGGAGCGCGCACGNCAGGCCGTCTGCGAAGCCACGNATACTCTGGGCCGCCCTCGGAGAAGTTCGGGGGCGTCAGGAGGTCNGAGGGGTCCGAACTGAGGTGTGCGGGCCGGGGATTCGGGTTGGGGCCTGCGGTTCCACTGCAGTCGTCCGCCCCCGATGTTGTGCGAAGGGCCC
# ...

# Get first variable from command line
my $firstArg = shift @ARGV;

# Print help information if requested
if($firstArg eq "-help" || $firstArg eq "" || $firstArg eq "-h"){
	print color("green"), "Perl Script to remove isolates with poor site coverage from FASTA.\n\nCommand Line Structure:\n", color("reset");
	print "\tperl RemovePoorCovverageIsolatesFromFasta.pl threshold sequences_date.fasta\n";
	print "\t\tthreshold\t\tCoverage threshold, below which isolates will be removed (from 0 - 1)\n";
	print "\t\tsequences_date.fasta\tPath to FASTA file, file should have date as last delimited part of name\n";

	exit 0;	
}

# Get the coverage threshold
my $threshold = $firstArg;

# Open in the Sample FASTA File
my $fastaFile = shift @ARGV; 
open FASTA, $fastaFile or die "Couldn't open $fastaFile:$!";

# Create the name for the output fasta file
my $outputFasta = (split /\./, $fastaFile)[0] . "_Cov-$threshold" . ".fasta";

# Create a file to store the coverage of each isolate
my $outputTable = "IsolateVariantPositionCoverage_" . (split /\./, (split /_/, $fastaFile)[-1])[0] . ".txt";
open COVERAGE, ">$outputTable" or die "Couldn't open $outputTable:$!";
print COVERAGE "Isolate\tVariantPositionCoverage\n";

# Check the input settings
print "Input settings:\n";
print "\tFASTA file: $fastaFile\n";
print "\tCoverage Threshold = $threshold\n";
print "\nThe following output files will be produced:\n";
print "\t$outputFasta\tFASTA file where sequences with coverage >= $threshold will be stored\n";
print "\t$outputTable\tTable reporting the proportion of sites with an allele present\n\n";

# Create variables to store the isolateIDs and sequence
my $name;
my $sequence;
my @names;
my @sequences;
my $index = -1;
my @nucleotides;
my $prop;

# Create the necessary variables for parsing the FASTA file
my $line;
my @cols;
my $lineNo = 0;

# Begin reading the FASTA file
while(<FASTA>){
	$lineNo++;
	$line = $_;
	chomp($line);
	
	# Skip the first line
	next if $lineNo == 1;
	
	# Have we found a new isolate?
	if($line =~ /^>/){
		
		# Print out the information for the previous isolate if it has a high enough quality
		if($lineNo != 2){
			
			@nucleotides = split //, $sequence;
			$prop = 0;
			
			for(my $i = 0; $i < scalar(@nucleotides); $i++){
				$prop++ if $nucleotides[$i] ne "N";
			}
			$prop = $prop / scalar(@nucleotides);
			
			print COVERAGE "$name\t$prop\n";
			
			if($prop >= $threshold){
				
				$index++;
				$names[$index] = $name;
				$sequences[$index] = $sequence;
			}else{
				print color("red"), "Removed: $name\n", color("reset");
			}
		
		}
		
		# Get the isolate name
		$name = substr($line, 1);
		
		# Reset the sequence
		$sequence = "";
	}else{
		$sequence = $sequence . "" . $line;
	}
}

# Deal with the last sequence
@nucleotides = split //, $sequence;
$prop = 0;

for(my $i = 0; $i < scalar(@nucleotides); $i++){
	$prop++ if $nucleotides[$i] ne "N";
}
$prop = $prop / scalar(@nucleotides);

print COVERAGE "$name\t$prop\n";

if($prop >= $threshold){
	$index++;
	$names[$index] = $name;
	$sequences[$index] = $sequence;
}

# Close the input and output files
close(FASTA);

# Open an output FASTA file
open OUTPUT, ">$outputFasta" or die "Couldn't open $outputFasta:$!";

# Print out the sequences of the isolates with sufficient coverage
my $nIsolates = @names;
my $seqLength = @nucleotides;
print OUTPUT "$nIsolates $seqLength\n";

for(my $i = 0; $i < scalar(@names); $i++){
	print OUTPUT ">$names[$i]\n$sequences[$i]\n";
}

# Close the output file
close(OUTPUT);

